# AES Cipher Decrypt
# Author: Jonathan Kenney (M08837382)

### imports
import numpy as np

### constants

# sbox is the lookup table for the subBytes function
sbox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
      0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
      0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
      0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
      0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
      0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
      0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
      0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
      0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
      0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
      0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
      0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
      0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
      0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
      0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
      0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
      0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
      0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
      0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
      0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
      0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
      0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
      0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
      0x54, 0xbb, 0x16]

# C is the transformation matrix for the mixColumns step
C = np.array([[2,3,1,1],[1,2,3,1],[1,1,2,3],[3,1,1,2]], np.int32)

# P is a component for polynomial multiplication over GF(2^8) 
P = 0b00011011

### functions

# leftShift is a helper function that properly handles left shifting for gf28Mult
def leftShift(b):
  b = bin(b << 1)[2:]
  if len(b) > 8:
    return int(b[1:], 2)
  else:
    return int(b, 2)

# gf28Mult is a helping function for polynomial multiplication over GF(2^8) in mixColumns step
def gf28Mult(b0, b1):

  if b1 == 1:
    return b0
  elif b1 == 2:
    if len(bin(b0)) == 10: 
      return leftShift(b0) ^ P
    else:
      return leftShift(b0)
  else:
    if len(bin(b0)) == 10:
      return (leftShift(b0) ^ P) ^ b0
    else:
      return leftShift(b0) ^ b0

# initState converts the message and subkeys bytes into matrices
def initState(message):
 
  s = np.array([np.zeros(4), np.zeros(4), np.zeros(4), np.zeros(4)], np.int32)
  
  for n in range(4):
    for m in range(4):
      s[m,n] = message[n*4+m]
  
  return s

# addRound adds the state and round key
def addRound(s, k):
  
  for n in range(4):
    for m in range(4):
      s[m,n] ^= k[m,n]

# subBytes substitutes the state based on the sbox
def subBytes(s):
  
  for m in range(4):
    for n in range(4):
      s[m,n] = sbox[s[m,n]]

# shiftRows shifts each element depending on the row it is in
def shiftRows(s):

  temp = s.copy()
  for m in range(4):
    for n in range(4):
      s[m,n] = temp[m,(n+m)%4]

# mixColumns performs the matrix transformation on the state matrix
def mixColumns(s):

  temp = s.copy()
  for m in range(4):
    for n in range(4):
      s[m,n] = gf28Mult(temp[0,n], C[m,0]) ^ gf28Mult(temp[1,n], C[m,1]) ^ gf28Mult(temp[2,n], C[m,2]) ^ gf28Mult(temp[3,n], C[m,3])
  
### main program
def main():

  # init vars
  subkey0 = b''
  subkey1 = b''
  message = b''

  # open subkey file and read subkeys into separate bytearrays
  with open('./data/subkey_example.txt', 'r') as f:
    subkey0 = bytearray.fromhex(f.readline())
    subkey1 = bytearray.fromhex(f.readline())
    f.close()
  
  # open plaintext file and read message into bytearray
  with open('./data/plaintext.txt', 'r') as f:
    message = bytearray(f.read().encode('utf-8'))
    f.close()

  # convert bytearrays into matrices
  s = initState(message)
  addkey0 = initState(subkey0)
  addkey1 = initState(subkey1)

  # perform the initial addKey step
  addRound(s, addkey0)
  
  # perform the subBytes step
  subBytes(s)
  
  # perform the shiftRows step
  shiftRows(s)

  # perform the mixColumns step
  mixColumns(s)
  
  # perform the addKey step
  addRound(s, addkey1)
  
  # write ciphertext as hex string
  c = ''
  for n in range(4):
    for m in range(4):
      if s[m,n] < 0x10:
        c += "0" + hex(s[m,n])[2:]
      else:
        c += hex(s[m,n])[2:]

  print(f'1st Round Output: {c}')

  # write ciphertext to result file
  with open('./data/result.txt', 'w') as f:
    f.write(c)
    f.close()

### main boilerplate
if __name__ == '__main__':
  main()